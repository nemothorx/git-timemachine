#!/bin/bash

# "github ls"

# This script gives a listing reminiscent of github (and similar) interfaces:
# filename ~ descripton of last commit against this file ~ date of commit
#
# It works by parsing the output of `git log` (once) and `git blame` (once for
# every file). It is not optimal, but it works for the smaller repos I have :)
#

# Check if we're even in a git repo
git status 2>/dev/null
case $? in 
    128) 
        echo "* Not a git repo. Have a normal directory listing"
        echo ""
        # in a similarish order to github though
        ls -oh --group-directories-first 
        exit
        ;;
esac

export IFS="	"   # tab the IFS for parsing sanity later

# setup some default variables for later compare
fnameprev=".non.null.string"    # musn't match a dir name, hence dotfile style
ttimenewest=1   # newer times will be bigger numbers
# setup some variables for pretty colour formatting too
white=$(tput setaf 7)
boldwhite=$(tput setaf 15)
teal=$(tput setaf 14)
green=$(tput setaf 10)
yellow=$(tput setaf 11)
reset=$(tput sgr0)
greyback=$(tput setab 8)

declare -A titleline    # an associative array for the git repo summary line
declare -A dirline    # an associative array for the directory summary line
declare -A relatime     # an associative array of relative times for hashes

do_getblameinfo() {
    infile=$1
    # the core info we want is within git blame | awk 
    # (author time (epoch time), hash, authorname, summary text
    # INFILE added to awk - it's now the file OR top directory
    git blame --line-porcelain $infile | awk -v INFILE=${infile%%/*}  '
        {
            if (/^author-time /) { 
                authtime=$2
            }
            if (/^[0-9a-z]{40} /) {
                ghash=$1
            }
            if (/^author /) { 
                authname=$2" "$3" "$4" "$5" "$6
            }
            if (/^summary /) { 
                printf INFILE"	"authtime"	"ghash"	"authname"	"
                $1="";print 
            } 
        }' | sort -gr | head -1 
        # this sort|head gets the newest edit for that file
        # ...it could probably be done within the awk with more effort
}


####################################################### main, basically

# first: summary line, github style

# note: I'm relying on `cat -n` being tab separated, to match above IFS ;)
while read num authorname githash authorreltime summary; do
    # summary is at the end in case it's nonexistent, which can happen
    if [ $num -eq 1 ] ; then
        titleline[an]=$authorname
        titleline[s]=$summary
        titleline[h]=$githash
        titleline[ar]=$authorreltime
    fi
    # populate a hash here with friendly relative times
    relatime[a$githash]="$authorreltime"
done < <(git log --abbrev-commit --abbrev=10 --format=format:"%an	%h	%ar	%s" --all | cat -n | sed -e 's/^\s*//g')

# and our loop finished with $num set to our count of commits. 
printf "$greyback $white%-12s $boldwhite%-28s $greenâœ” $yellow%7s %14s $white%3s commits$reset\n" ${titleline[an]:0:12} ${titleline[s]:0:28} ${titleline[h]:0:7} ${titleline[ar]:0:14} $num

# TODO: the above should be smarter, and only apply when we have a .git directory
# ...if we don't, we should instead do a subdirectory status (disabled below because bugs)


# directories and files all handled by this. assumes files don't have newlines
while read fname ttime ghash authorname summary ; do
    if [ -n "$ghash" ] ; then   # this is such a kludge to check if a file is known to the repo
        shrthash=${ghash:0:10}
        # then we only echo the first one... 
        # (for files this all does nothing, basically)
        if [ $fname != $fnameprev ] ; then
            # TODO: option to switch between emoji and ascii directory symbol
#            typ="[-]" ; [ -d "$fname" ] && typ="[d]" # folder or file?
            typ="ðŸ—Ž" ; [ -d "$fname" ] && typ="ðŸ–¿" # folder or file?
            # TODO: option to switch between relative and absolute time
            # TODO: detect if name/summary are truncated and append "â€¦"  
#            printf "%-3s %-20s %-36s %17s\n" $typ ${fname:0:20} ${summary:0:36} $(date -d @$ttime +"%F %T")
            printf "%-3s %-22s $teal%-39s $yellow%14s$reset\n" $typ ${fname:0:22} ${summary:0:39} ${relatime[a$shrthash]:0:14}
        fi
        # TODO/BUG: this dirline info doesn't escape this loop while the loop |sort-V. 
        # ...but without the sort-V, the ordering is rubbish
        if [ $ttime -gt $ttimenewest ] ; then
            ttimenewest=$ttime
            dirline[an]=$authorname
            dirline[s]=$summary
            dirline[h]=$shrthash
            dirline[ar]=${relatime[a$shrthash]}
    # printf "$greyback $white%-16s $boldwhite%-20s $greenâœ” $yellow%8s %-10s$reset\n" ${dirline[an]} ${dirline[s]} ${dirline[h]} ${dirline[ar]}
        fi
    fi
    fnameprev=$fname
done < <(find -not -path '*/.*' -type f -printf "%P\n" | while read line ; do
            do_getblameinfo "${line}" 2>/dev/null
        done | sort -gr) | sort -V

# sort-gr within the subshell is to get the multiple dir entries ordered so the
# loop above can get first of each. Makes no impact on files.
# sort-V outside hte subshell gives us our final order - similar to github

### TODO 
# 
## Bugs:
# * This should have a subdirectory specific status line (mimicking github),
#   but |sort-V above makes $dirline array be unavailable outside the loop
#   ...making this pointless:
#       printf "$greyback $white%-16s $boldwhite%-20s $greenâœ” $yellow%8s %-10s$reset\n" ${dirline[an]} ${dirline[s]} ${dirline[h]} ${dirline[ar]}
#   The statusline works without the |sort-V, but at the sacrifice of a nicely
# sorted list
#
#   ideal case: select between git and directory level statuslines
#   automatically, and then have the listing correct thereafter.  selecting
#   between should be a matter of looking for a .git directory

## TODO: 
# * would be neat to handle this way better than designed-for-80column
#   hardcoded printf. 
#   Instead we should calculate max string lengths for name and time, and then
#   truncate msg to suit and then offload formatting to `|column -t`?


