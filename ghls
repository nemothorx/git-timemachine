#!/bin/bash

# "github ls"

# This script gives a listing reminiscent of github (and similar) interfaces:
# filename ~ descripton of last commit against this file ~ date of commit
#
# It works by parsing the output of `git log` (once) and `git log <file>` (once
# for every file). It's not optimal but works reasonably well for moderate
# sized repos (but prob not good for linux kernel sort of thing!)
#

# TODO: accept $1 as a directory or a file, and run relative to that
#   (ie: similar to traditional `ls`)

# TODO: investigate gitea, gitlab, etc for how they show summaries too

# Check if we're even in a git repo and tell us about it (in 
git status --short --branch --show-stash 2>/dev/null
case $? in 
    128) 
        echo "* Not a git repo. Have directory listing from ls"
        echo ""
        # in a similarish order to github though
        ls -ohA --group-directories-first 
        exit
        # TODO: consider having custom output matching the rest of the style?
        ;;
esac

export IFS="	"   # tab only for IFS - for parsing sanity later

# setup some variables for pretty colour formatting too
white=$(tput setaf 7)
boldwhite=$(tput setaf 15)
teal=$(tput setaf 14)
green=$(tput setaf 10)
yellow=$(tput setaf 11)
reset=$(tput sgr0)
greyback=$(tput setab 8)


######################### functions to use

do_getfileinfo() {
    intype=$1
    infile=$2
    # note: there are TABs within this for the output
    subjecttime=$(git log -n 1 --format=format:'%s	%ar	%at' $infile | head -n 1)
    echo "$intype	$infile	$subjecttime"
}


####################################################### main, basically

# first: summary line, github style

gitrepoinfo=$(git log --abbrev-commit --abbrev=10 --format=format:"%an	%h	%ar	%s" -n 1)
# gri = git repo info
gri_authorname=$(echo "$gitrepoinfo" | cut -f 1)
gri_hash=$(echo "$gitrepoinfo" | cut -f 2)
gri_authorreltime=$(echo "$gitrepoinfo" | cut -f 3)
gri_summary=$(echo "$gitrepoinfo" | cut -f 4)
gri_commitcount=$(git rev-list HEAD --count)
    # this is more accurate than the old method of counting entries in `git log`
    # ...this way gives a smaller number but accurate to github
    # NOTE: not checked for sanity if we're in a different branch

    # TODO: the green tick has a github specific meaning which is irrelevant here
    # so: consider some smarts to indicate something else? 
    #   maybe a `git status` summary?
printf "$greyback $white%-12s $boldwhite%-28s $greenâœ” $yellow%7s %14s $white%3s commits $reset\n" ${gri_authorname:0:12} ${gri_summary:0:28} ${gri_hash:0:7} ${gri_authorreltime:0:14} $gri_commitcount

# detect if we're in a subdirectory and give a directory-specific status
# (this is equiv to the only header line github gives)

dirdiff=$(realpath --relative-to=$(git rev-parse --show-toplevel) .)
if [ $dirdiff != "." ] ; then
    gitdirinfo=$(git log --abbrev-commit --abbrev=10 --format=format:"%an	%h	%ar	%s" -n 1 .)
    # gdi = dit directory info
    gdi_authorname=$(echo "$gitdirinfo" | cut -f 1)
    gdi_hash=$(echo "$gitdirinfo" | cut -f 2)
    gdi_authorreltime=$(echo "$gitdirinfo" | cut -f 3)
    gdi_summary=$(echo "$gitdirinfo" | cut -f 4)
    echo "  $greyback$dirdiff$reset"
    printf "  $greyback \`-> $white%-12s $boldwhite%-35s $greenâœ” $yellow%7s %14s $reset\n" ${gdi_authorname:0:12} ${gdi_summary:0:35} ${gdi_hash:0:7} ${gdi_authorreltime:0:14}
fi

### now give a line per directory/file found

while read ftype fname subject reltime ttime ; do
    # TODO: option to switch between unicode and ascii directory symbol
# ascii style (d remains d, f becomes -, matching ls style)
    # [ $ftype == "d" ] && typ="d" ; [ $ftype == "f" ] && typ="-"
# unicode style
    [ $ftype == "d" ] && typ="ðŸ–¿" ; [ $ftype == "f" ] && typ="ðŸ—Ž"
    # TODO: detect if directory has a single subdirectory in it, and list that
    #   (it's what github does)
    # TODO: detect if name/summary are truncated and append "â€¦"  
#    time=$(date -d @$ttime +"%F %T")    # absolute time
    time=$reltime   # relative time
    printf "%-3s %-16s $teal%-44s $yellow%16s$reset\n" $typ ${fname:0:16} ${subject:0:44} ${time:0:16}
done < <(find . -mindepth 1 -maxdepth 1 -not -name '.git' -printf "%Y	%P\n" | LC_ALL=C sort | while read ft fn ; do
            do_getfileinfo $ft "${fn}" 2>/dev/null
        done) 

## more TODO notes: 
# * would be neat to handle this way better than designed-for-80column
#   hardcoded printf. 
#   Instead we should calculate max string lengths for name and time, and then
#   truncate msg to suit and maybe offload formatting to `|column -t`?
# * Add feature to `touch` each file with it's newest time (and perhaps each
#   directory with the newest file-creation-time within), so as to bring the
#   filesystem idea of mtime in sync with git's idea. 
#   Thus common tools (ls/find) can find recent (or old) files by normal means 
# * option to display time as an absolute, rather than human friendly

